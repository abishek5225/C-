In C#, the this keyword refers to the current instance of a class or object. 
It can be used for a variety of purposes, including:

1.  Distinguishing Between Instance Variables and Method Parameters:
    When a method or constructor has a parameter with the same name 
    as an instance variable, this helps differentiate them.

    class Person
    {
    private string name;

    public Person(string name)
    {
        // Use `this` to refer to the instance variable
        this.name = name;
    }

    public void ShowName()
    {
        Console.WriteLine($"Name: {this.name}");
    }
    }

    class Program
    {
    static void Main()
    {
        Person person = new Person("Abishek");
        person.ShowName(); // Output: Name: Abishek
    }
    }

2.  Chaining Constructors:
    You can use this to call one constructor from another within the same class.
    class Person
    {
    private string name;
    private int age;

    // Main constructor
    public Person(string name, int age)
    {
        this.name = name;
        this.age = age;
    }

    // Constructor chaining
    public Person(string name) : this(name, 18) // Default age is 18
    {
    }

    public void ShowInfo()
    {
        Console.WriteLine($"Name: {this.name}, Age: {this.age}");
    }
    }

    class Program
    {
    static void Main()
    {
        Person person1 = new Person("Abishek", 22);
        person1.ShowInfo(); // Output: Name: Abishek, Age: 22

        Person person2 = new Person("Ram");
        person2.ShowInfo(); // Output: Name: Ram, Age: 18
    }
    }

3.  Passing the Current Instance
    You can pass the current instance of the class to another method or object.

    class Person
    {
    private string name;

    public Person(string name)
    {
        this.name = name;
    }

    public void IntroduceYourself()
    {
        Helper.PrintPerson(this); // Pass the current instance
    }

    public string GetName()
    {
        return this.name;
    }
    }

    class Helper
    {
    public static void PrintPerson(Person person)
    {
        Console.WriteLine($"Hello, my name is {person.GetName()}!");
    }
    }

    class Program
    {
    static void Main()
    {
        Person person = new Person("Abishek");
        person.IntroduceYourself(); // Output: Hello, my name is Abishek!
    }
    }

note:   this is used only in instance methods or constructors.
        It cannot be used in static methods because static methods 
        donâ€™t operate on a specific instance.



