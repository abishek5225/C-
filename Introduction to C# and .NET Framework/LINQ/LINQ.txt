LINQ (Language Integrated Query) is a feature in C# that allows you to query and manipulate data in 
a consistent and easy way. LINQ can be used with different data sources like:
Arrays and collections
Databases (via LINQ to SQL or Entity Framework)
XML files
Other data formats


Why Use LINQ?
Readability: Querying data becomes easy and clean.
Consistency: Provides a single query syntax for all types of data sources.
Reduced Code: Replaces loops and complex logic with shorter queries.
Error Checking: LINQ provides compile-time checking, which reduces runtime errors.

Key LINQ Methods in C#
LINQ provides methods to filter, transform, sort, and count data easily. 
Here are the most commonly used methods explained with simple examples.

1. Where - Filter Data
The Where method is used to filter data based on a condition. 
It returns only the items that satisfy the condition.

Example: Find all even numbers from a list.

int[] numbers = { 1, 2, 3, 4, 5, 6 };
var evenNumbers = numbers.Where(n => n % 2 == 0);

foreach (var n in evenNumbers)
{
    Console.WriteLine(n);
}

2. Select - Transform Data
    The Select method is used to transform each element in the collection into a new form.

Example: Find the square of each number in a list.

int[] numbers = { 1, 2, 3, 4 };
var squares = numbers.Select(n => n * n);

foreach (var square in squares)
{
    Console.WriteLine(square);
}

3. OrderBy - Sort Data in Ascending Order

    The OrderBy method sorts the data in ascending order.
    Example: Sort numbers in ascending order.

int[] numbers = { 5, 3, 8, 1 };
var sortedNumbers = numbers.OrderBy(n => n);

foreach (var n in sortedNumbers)
{
    Console.WriteLine(n);
}

4. OrderByDescending - Sort Data in Descending Order
The OrderByDescending method sorts the data in descending order.

Example: Sort numbers in descending order.

int[] numbers = { 5, 3, 8, 1 };
var sortedNumbers = numbers.OrderByDescending(n => n);

foreach (var n in sortedNumbers)
{
    Console.WriteLine(n);
}

5. First - Get the First Element
The First method returns the first element from the collection that meets a condition.

Example: Find the first even number.

int[] numbers = { 1, 3, 4, 6 };
var firstEven = numbers.First(n => n % 2 == 0);

Console.WriteLine(firstEven);


Key LINQ Methods in C# (Simplified)
LINQ provides methods to filter, transform, sort, and count data easily. Here are the most commonly used methods explained with simple examples.

1. Where - Filter Data
The Where method is used to filter data based on a condition. It returns only the items that satisfy the condition.

Find all even numbers from a list.

int[] numbers = { 1, 2, 3, 4, 5, 6 };
var evenNumbers = numbers.Where(n => n % 2 == 0);

foreach (var n in evenNumbers)
{
    Console.WriteLine(n);
}


2. Select - Transform Data
The Select method is used to transform each element in the collection into a new form.

 Find the square of each number in a list.


int[] numbers = { 1, 2, 3, 4 };
var squares = numbers.Select(n => n * n);

foreach (var square in squares)
{
    Console.WriteLine(square);
}


3. OrderBy - Sort Data in Ascending Order
The OrderBy method sorts the data in ascending order.

Sort numbers in ascending order.

int[] numbers = { 5, 3, 8, 1 };
var sortedNumbers = numbers.OrderBy(n => n);

foreach (var n in sortedNumbers)
{
    Console.WriteLine(n);
}


4. OrderByDescending - Sort Data in Descending Order
The OrderByDescending method sorts the data in descending order.

Example: Sort numbers in descending order.


int[] numbers = { 5, 3, 8, 1 };
var sortedNumbers = numbers.OrderByDescending(n => n);

foreach (var n in sortedNumbers)
{
    Console.WriteLine(n);
}


5. First - Get the First Element
The First method returns the first element from the collection that meets a condition.

 Find the first even number.

int[] numbers = { 1, 3, 4, 6 };
var firstEven = numbers.First(n => n % 2 == 0);

Console.WriteLine(firstEven);


6. Count - Count the Elements
The Count method counts the number of elements in a collection, optionally with a condition.
Count how many numbers are greater than 5.

int[] numbers = { 1, 6, 8, 10 };
var count = numbers.Count(n => n > 5);

Console.WriteLine($"Numbers greater than 5: {count}");


7. ToList - Convert to a List
The ToList method converts the result of a LINQ query into a List.

Example: Filter even numbers and convert them to a list.

int[] numbers = { 1, 2, 3, 4, 5, 6 };
var evenNumbers = numbers.Where(n => n % 2 == 0).ToList();

foreach (var n in evenNumbers)
{
    Console.WriteLine(n);
}
