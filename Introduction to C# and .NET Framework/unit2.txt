# Console and GUI Application:

#   - Console Application: A console application is a program that runs in a command-line interface (CLI) 
                            like the Command Prompt (on Windows) or Terminal (on macOS/Linux). It doesn’t 
                            have any fancy graphical interface (like buttons or images). Instead, it takes 
                            input from the user and shows output as plain text.

#   - GUI Application: A Graphical User Interface (GUI) application is a program with a visual interface 
        that includes:
        ->Buttons
        ->Text boxes
        ->Drop-down menus
        ->Images
        It’s the type of application you interact with daily, like a browser, a media player, or a chat app.

        Example Code (Windows Forms):
        Here’s a basic example of a GUI app that shows a window with a button:

        using System;
        using System.Windows.Forms;

        class Program : Form
        {
        static void Main()
        {
        Application.Run(new Program());
        }

         Button myButton;

         public Program()
         {
        Text = "My First GUI App"; // Window title
        myButton = new Button
        {
            Text = "Click Me!", // Button text
            Left = 50,
            Top = 50,
        };
        myButton.Click += (sender, e) => MessageBox.Show("Hello, World!"); // Event when button is clicked
        Controls.Add(myButton); // Add button to the window
    }
}

#  Identifiers and Keywords:

            Identifiers:
            Names you give to variables, classes, methods, etc.

            Example: int age = 25; → age is an identifier.

            Rules for Naming Identifiers:

            1. Must Start with a Letter or Underscore:
                Valid: myVariable, _tempValue.
                Invalid: 1stNumber (starts with a digit).

            2. Can Contain Letters, Digits, and Underscores:
                Valid: age25, user_name.
            
            3. No Spaces Allowed:
                  Valid: userName.  
                  Invalid: user name (contains a space).

            4. Case-Sensitive:
                    Age and age are two different identifiers.

            5. Cannot Be a Keyword:
                    Keywords (like int, class, if) are reserved 
                    words in C# and cannot be used as identifiers.
                    Example: You cannot name a variable if, else, int, string.



            Keywords:
            Special reserved words in C# that you cannot use as 
            identifiers because they have a fixed meaning.

            Example: int, string, if, else.

# Writing Comments:
    Comments are notes in your code to explain what it does. 
    The computer ignores comments when running the program.

    -> Single-line comments: Start with //.
        Example: // This is a comment
    -> Multi-line comments: Start with /* and end with */.
        Example:
        /*
        This is a 
        multi-line comment
        */

# Data Types:
        Data types in C# define the kind of data a variable can store. 
        For example, a variable can hold numbers, text, or true/false values. 
        Choosing the right data type ensures that your program runs efficiently 
        and avoids errors.

        C# data types are divided into two categories:

        1. Value Types: Store the actual data. These are simple types like numbers 
                        or characters.
                        Examples: int, float, char, bool.

        2. Reference Types: Store a reference (or address) to the actual data in memory. 
                            These are used for more complex data like objects or strings.
                            Examples: string, object, arrays, and classes.

# Expressions and Operators:
        Expressions: A combination of variables, values, and operators that produce a result.
        Example: int result = 5 + 3; → 5 + 3 is an expression.


        Operators: Symbols that perform operations on variables and values.
        Examples:
                + → Adds two numbers.
                - → Subtracts two numbers.
                * → Multiplies two numbers.
                / → Divides two numbers.
                == → Checks if two values are equal.


# Strings and Characters:

What is a String?
A string is a sequence of characters used to represent text in C#. 
Strings are written inside double quotes ("). For example:
string name = "Alice";

Here, "Alice" is a string.

What is a Character (char)?
A character (char) represents a single letter, number, or symbol. 
Characters are written inside single quotes ('). For example:

char grade = 'A';

Here, 'A' is a character.

# Arrays:
        An array is a collection of variables of the same data type, 
        stored together in memory. It’s like a container that holds 
        multiple items of the same kind, arranged in a specific order. 
        For example, you can use an array to store multiple numbers, 
        names, or even characters.

        Why Use Arrays?
        Imagine you need to store the marks of 5 students. 
        Instead of creating 5 separate variables:

        int mark1 = 85;
        int mark2 = 90;
        int mark3 = 78;
        int mark4 = 92;
        int mark5 = 88;

        You can use an array to store all marks in one variable:
        int[] marks = { 85, 90, 78, 92, 88 };

        Types of Arrays:

        1. Single-Dimensional Array
                This is the most basic type of array. It stores elements in a linear order.

                string[] fruits = { "Apple", "Banana", "Cherry" };

        2. Multi-Dimensional Array
            These arrays have more than one dimension, like a grid or table.
            Example of a 2D array:

            int[,] matrix = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };

        3. Jagged Array
                    A jagged array is an array of arrays, where each "inner" array can have a different size.
                    int[][] jagged = new int[3][];
                            jagged[0] = new int[] { 1, 2 };
                            jagged[1] = new int[] { 3, 4, 5 };
                            jagged[2] = new int[] { 6 };







